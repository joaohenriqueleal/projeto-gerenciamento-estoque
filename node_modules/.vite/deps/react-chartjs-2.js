import { __toESM, require_react } from "./react-CSb6HjG4.js";
import { BarController, BubbleController, Chart as Chart$1, DoughnutController, LineController, PieController, PolarAreaController, RadarController, ScatterController } from "./chart-B9JC_kT1.js";

//#region node_modules/react-chartjs-2/dist/index.js
var import_react = /* @__PURE__ */ __toESM(require_react(), 1);
var defaultDatasetIdKey = "label";
function reforwardRef(ref, value) {
	if (typeof ref === "function") ref(value);
	else if (ref) ref.current = value;
}
function setOptions(chart, nextOptions) {
	const options = chart.options;
	if (options && nextOptions) Object.assign(options, nextOptions);
}
function setLabels(currentData, nextLabels) {
	currentData.labels = nextLabels;
}
function setDatasets(currentData, nextDatasets) {
	let datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;
	const addedDatasets = [];
	currentData.datasets = nextDatasets.map((nextDataset) => {
		const currentDataset = currentData.datasets.find((dataset) => dataset[datasetIdKey] === nextDataset[datasetIdKey]);
		if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) return { ...nextDataset };
		addedDatasets.push(currentDataset);
		Object.assign(currentDataset, nextDataset);
		return currentDataset;
	});
}
function cloneData(data) {
	let datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;
	const nextData = {
		labels: [],
		datasets: []
	};
	setLabels(nextData, data.labels);
	setDatasets(nextData, data.datasets, datasetIdKey);
	return nextData;
}
/**
* Get dataset from mouse click event
* @param chart - Chart.js instance
* @param event - Mouse click event
* @returns Dataset
*/ function getDatasetAtEvent(chart, event) {
	return chart.getElementsAtEventForMode(event.nativeEvent, "dataset", { intersect: true }, false);
}
/**
* Get single dataset element from mouse click event
* @param chart - Chart.js instance
* @param event - Mouse click event
* @returns Dataset
*/ function getElementAtEvent(chart, event) {
	return chart.getElementsAtEventForMode(event.nativeEvent, "nearest", { intersect: true }, false);
}
/**
* Get all dataset elements from mouse click event
* @param chart - Chart.js instance
* @param event - Mouse click event
* @returns Dataset
*/ function getElementsAtEvent(chart, event) {
	return chart.getElementsAtEventForMode(event.nativeEvent, "index", { intersect: true }, false);
}
function ChartComponent(props, ref) {
	const { height = 150, width = 300, redraw = false, datasetIdKey, type, data, options, plugins = [], fallbackContent, updateMode,...canvasProps } = props;
	const canvasRef = (0, import_react.useRef)(null);
	const chartRef = (0, import_react.useRef)(null);
	const renderChart = () => {
		if (!canvasRef.current) return;
		chartRef.current = new Chart$1(canvasRef.current, {
			type,
			data: cloneData(data, datasetIdKey),
			options: options && { ...options },
			plugins
		});
		reforwardRef(ref, chartRef.current);
	};
	const destroyChart = () => {
		reforwardRef(ref, null);
		if (chartRef.current) {
			chartRef.current.destroy();
			chartRef.current = null;
		}
	};
	(0, import_react.useEffect)(() => {
		if (!redraw && chartRef.current && options) setOptions(chartRef.current, options);
	}, [redraw, options]);
	(0, import_react.useEffect)(() => {
		if (!redraw && chartRef.current) setLabels(chartRef.current.config.data, data.labels);
	}, [redraw, data.labels]);
	(0, import_react.useEffect)(() => {
		if (!redraw && chartRef.current && data.datasets) setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);
	}, [redraw, data.datasets]);
	(0, import_react.useEffect)(() => {
		if (!chartRef.current) return;
		if (redraw) {
			destroyChart();
			setTimeout(renderChart);
		} else chartRef.current.update(updateMode);
	}, [
		redraw,
		options,
		data.labels,
		data.datasets,
		updateMode
	]);
	(0, import_react.useEffect)(() => {
		if (!chartRef.current) return;
		destroyChart();
		setTimeout(renderChart);
	}, [type]);
	(0, import_react.useEffect)(() => {
		renderChart();
		return () => destroyChart();
	}, []);
	return /* @__PURE__ */ import_react.createElement("canvas", {
		ref: canvasRef,
		role: "img",
		height,
		width,
		...canvasProps
	}, fallbackContent);
}
var Chart = /* @__PURE__ */ (0, import_react.forwardRef)(ChartComponent);
function createTypedChart(type, registerables) {
	Chart$1.register(registerables);
	return /* @__PURE__ */ (0, import_react.forwardRef)((props, ref) => /* @__PURE__ */ import_react.createElement(Chart, {
		...props,
		ref,
		type
	}));
}
var Line = /* @__PURE__ */ createTypedChart("line", LineController);
var Bar = /* @__PURE__ */ createTypedChart("bar", BarController);
var Radar = /* @__PURE__ */ createTypedChart("radar", RadarController);
var Doughnut = /* @__PURE__ */ createTypedChart("doughnut", DoughnutController);
var PolarArea = /* @__PURE__ */ createTypedChart("polarArea", PolarAreaController);
var Bubble = /* @__PURE__ */ createTypedChart("bubble", BubbleController);
var Pie = /* @__PURE__ */ createTypedChart("pie", PieController);
var Scatter = /* @__PURE__ */ createTypedChart("scatter", ScatterController);

//#endregion
export { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };
//# sourceMappingURL=react-chartjs-2.js.map